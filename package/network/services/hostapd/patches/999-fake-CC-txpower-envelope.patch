list hostapd_options 'fakecc=CC fakepwr=20'

// changes
// properly fill up country3
// itll use original country code when fakecc is unspecified
// properly fake txpower and TPE, in this case txpower=tpe. itll use real value if unspecified
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2613,8 +2613,15 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		os_memcpy(conf->country, pos, 2);
+		os_memcpy(conf->fakecc, pos, 2);
+	} else if (os_strcmp(buf, "fakepwr") == 0) {
+		int val = atoi(pos);
+		conf->fakepwr = val;
+	} else if (os_strcmp(buf, "fakecc") == 0) {
+		if (os_strlen(pos) == 2) { os_memcpy(conf->fakecc, pos, 2); } else { wpa_printf(MSG_ERROR, "invalid fakecc, using country"); } /* anti-dumb */
 	} else if (os_strcmp(buf, "country3") == 0) {
 		conf->country[2] = strtol(pos, NULL, 16);
+		conf->fakecc[2] = strtol(pos, NULL, 16);
 	} else if (os_strcmp(buf, "ieee80211d") == 0) {
 		conf->ieee80211d = atoi(pos);
 	} else if (os_strcmp(buf, "ieee80211h") == 0) {
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -257,6 +257,7 @@ struct hostapd_config * hostapd_config_d
 	conf->ap_table_max_size = 255;
 	conf->ap_table_expiration_time = 60;
 	conf->track_sta_max_age = 180;
+	conf->fakepwr = 0;
 
 #ifdef CONFIG_TESTING_OPTIONS
 	conf->ignore_probe_probability = 0.0;
@@ -296,6 +297,7 @@ struct hostapd_config * hostapd_config_d
 	 * by default to indicate that the regulations encompass all
 	 * environments for the current frequency band in the country. */
 	conf->country[2] = ' ';
+	conf->fakecc[2] = ' ';
 
 	conf->rssi_reject_assoc_rssi = 0;
 	conf->rssi_reject_assoc_timeout = 30;
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1129,6 +1129,8 @@ struct hostapd_config {
 			  * 0x00..0x31: identifying IEEE 802.11 standard
 			  *	Annex E table (0x04 = global table)
 			  */
+	char fakecc[3];
+	int fakepwr;
 
 	int ieee80211d;
 
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -198,16 +198,19 @@ static u8 * hostapd_eid_country_add(stru
 				    struct hostapd_channel_data *start,
 				    struct hostapd_channel_data *prev)
 {
+	int fakepwr;
 	if (end - pos < 3)
 		return pos;
 
+	fakepwr = hapd->iconf->fakepwr;
+	
 	/* first channel number */
 	*pos++ = start->chan;
 	/* number of channels */
 	*pos++ = (prev->chan - start->chan) / chan_spacing + 1;
 	/* maximum transmit power level */
 	if (!is_6ghz_op_class(hapd->iconf->op_class))
-		*pos++ = start->max_tx_power;
+		if (fakepwr > 0) { *pos++ = fakepwr; } else { *pos++ = start->max_tx_power; }
 	else
 		*pos++ = 0; /* Reserved when operating on the 6 GHz band */
 
@@ -269,7 +272,7 @@ static u8 * hostapd_eid_country(struct h
 
 	*pos++ = WLAN_EID_COUNTRY;
 	pos++; /* length will be set later */
-	os_memcpy(pos, hapd->iconf->country, 3); /* e.g., 'US ' */
+	os_memcpy(pos, hapd->iconf->fakecc, 3); /* e.g., 'US ' */
 	pos += 3;
 
 	if (is_6ghz_op_class(hapd->iconf->op_class)) {
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7272,6 +7272,7 @@ u8 * hostapd_eid_txpower_envelope(struct
 	 */
 	chan = &mode->channels[i];
 	max_tx_power = chan->max_tx_power - local_pwr_constraint;
+	if (hapd->iconf->fakepwr > 0) { max_tx_power = hapd->iconf->fakepwr; }
 
 	/*
 	 * Local Maximum Transmit power is encoded as two's complement
